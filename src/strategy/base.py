"""
Base Strategy Module

Defines an abstract base class for trading strategies, outlining the
essential methods and attributes that all concrete strategy implementations
should inherit and implement.
"""

from abc import ABC, abstractmethod
import pandas as pd
import numpy as np


class BaseStrategy(ABC):
    """
    Abstract Base Class for Trading Strategies.

    Attributes:
        name (str): Name/identifier for this strategy.
        positions (pd.DataFrame): Tracks open positions (by ticker).
        trades (pd.DataFrame): Logs executed trades (date, ticker, action, quantity, etc.).
        current_prices (pd.Series): Latest known prices for tracked assets.

    Usage:
        Subclass BaseStrategy and override `generate_signals` and `execute_trades`.
    """

    def __init__(self, name: str):
        """
        Args:
            name (str): Name of the strategy.
        """
        self.name = name

        # positions[ticker] = total quantity currently held
        self.positions = pd.DataFrame(columns=["Quantity"])

        # trades: columns commonly include Date, Ticker, Action, Quantity, Price, etc.
        self.trades = pd.DataFrame()

        # Optional: track current prices if needed
        self.current_prices = pd.Series(dtype=float)

    @abstractmethod
    def generate_signals(self, returns: pd.DataFrame) -> pd.DataFrame:
        """
        Generate trading signals based on historical (or up-to-current-date) asset returns.

        Args:
            returns (pd.DataFrame): DataFrame of asset returns up to the current point in time.

        Returns:
            pd.DataFrame: A signal matrix of the same shape as 'returns', where each cell
                          might be 1 for buy, -1 for sell, 0 for no action, etc.
        """
        pass

    @abstractmethod
    def execute_trades(self, signals: pd.DataFrame) -> None:
        """
        Execute trades based on signals generated by `generate_signals`.

        Args:
            signals (pd.DataFrame): DataFrame with trading signals.

        Side Effects:
            - Updates self.positions
            - Appends to self.trades
        """
        pass

    def update_positions(self, trade: pd.Series) -> None:
        """
        Update current positions given a single executed trade.

        Args:
            trade (pd.Series): Contains fields like {'Ticker', 'Action', 'Quantity', 'Date'}.
        """
        ticker = trade["Ticker"]
        action = trade["Action"]
        quantity = trade["Quantity"]

        if ticker not in self.positions.index:
            self.positions.loc[ticker, "Quantity"] = 0

        if action.upper() == "BUY":
            self.positions.loc[ticker, "Quantity"] += quantity
        elif action.upper() == "SELL":
            self.positions.loc[ticker, "Quantity"] -= quantity

    def record_trade(self, trade: pd.Series) -> None:
        """
        Record an executed trade in the trades log.

        Args:
            trade (pd.Series): Contains trade info (Ticker, Action, Quantity, Price, Date).
        """
        self.trades = self.trades.append(trade, ignore_index=True)

    def reset(self) -> None:
        """
        Reset the strategyâ€™s positions and trades, e.g., at the start of a new backtest run.
        """
        self.positions = pd.DataFrame(columns=["Quantity"])
        self.trades = pd.DataFrame()
        self.current_prices = pd.Series(dtype=float)
